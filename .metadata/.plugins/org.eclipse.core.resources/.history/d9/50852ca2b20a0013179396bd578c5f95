package co.com.carp.petcity.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;
import java.util.Observable;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JToolBar;

import co.com.carp.petcity.entity.Owner;
import co.com.carp.petcity.entity.Pet;

/**
 * This class is attempt to manage different {@link JToolBar}(s) that can be used 
 * along application.
 * 
 * @author Carlos Rodriguez
 *
 */
public class JTPetCityTools extends Observable implements ActionListener, Serializable {

	/**
	 * Default serial version id.
	 */
	private static final long serialVersionUID = 11231212L;
	
	/**
	 * Identification from tool bar that is been currently used.
	 */
	private int idToolBarUsed;
	
	/**
	 * Button that allows save data when some change occurs.
	 */
	private JButton jbtSave;
	
	/**
	 * Button that allows add a new pet for register {@link Owner}s.
	 */
	private JButton jbtNewPet;
	
	/**
	 * Button that allows add or open clinic history for selected {@link Pet}.
	 */
	private JButton jbtClinicHistory;
	
	/**
	 * Tool bar used in {@link JFOwnerAndPetsInfo} screens. 
	 */
	public static final int TOOLBAR_PET_OWNER_INFO = 1;
	
	public JTPetCityTools(int idToolBar) {
		super();
		this.idToolBarUsed = idToolBar;
	}
	
	public JToolBar createJToolBar() {
		JToolBar toolBar = new JToolBar();
		if (TOOLBAR_PET_OWNER_INFO == this.idToolBarUsed) {
			toolBar = this.createPetAndOwnerToolBar();
		}
		return toolBar;
		
	}
	

	/**
	 * @return the idToolBarUsed
	 */
	public int getIdToolBarUsed() {
		return idToolBarUsed;
	}
	
	/**
	 * It'll make enable/disable save action when it needs.
	 * 
	 * @param enable True if button must be enabled, false otherwise.
	 */
	public void makeEnableSaveAction(boolean enable) {
		this.jbtSave.setEnabled(enable);
	}
	
	/**
	 * It'll make enable/disable actions (Create/Add clinic history, add new pet)
	 * when a new pet has been already added.
	 * 
	 * @param enable True if button must be enabled, false otherwise.
	 */
	public void makeEnableActionsForPet(boolean enable) {
		this.jbtNewPet.setEnabled(enable);
		this.jbtClinicHistory.setEnabled(enable);
	}

	/**
	 * Creates a new pet and owner tool bar, and it enables its buttons to receive the users' interaction. 
	 */
	private JToolBar createPetAndOwnerToolBar() {
		JToolBar toolbar = new JToolBar();
		this.jbtSave = new JButton(new ImageIcon(JTPetCityTools.class.getResource("/co/com/carp/petcity/image/disk_blue.png")));
		this.jbtSave.setToolTipText("Guardar");
		this.jbtSave.setEnabled(false);
		this.jbtSave.addActionListener(this);
		toolbar.add(this.jbtSave);
		toolbar.addSeparator();
		JButton jbtNewOwner = new JButton(new ImageIcon(JTPetCityTools.class.getResource("/co/com/carp/petcity/image/businessman_add.png")));
		jbtNewOwner.setToolTipText("Nuevo propietario");
		jbtNewOwner.addActionListener(this);
		toolbar.add(jbtNewOwner);
		toolbar.addSeparator();
		this.jbtNewPet = new JButton(new ImageIcon(JTPetCityTools.class.getResource("/co/com/carp/petcity/image/dog_add.png")));
		this.jbtNewPet.setToolTipText("Agregar mascota");
		this.jbtNewPet.addActionListener(this);
		toolbar.add(this.jbtNewPet);
		toolbar.addSeparator();
		this.jbtClinicHistory = new JButton(new ImageIcon(JTPetCityTools.class.getResource("/co/com/carp/petcity/image/doctor.png")));
		this.jbtClinicHistory.setToolTipText("Ver historia clinica");
		this.jbtClinicHistory.addActionListener(this);
		toolbar.add(this.jbtClinicHistory);
		toolbar.addSeparator();
		JButton jbtNewNote = new JButton(new ImageIcon(JTPetCityTools.class.getResource("/co/com/carp/petcity/image/note_add.png")));
		jbtNewNote.setToolTipText("Agregar nota");
		jbtNewNote.addActionListener(this);
		toolbar.add(jbtNewNote);
		toolbar.addSeparator();
		JButton jbtViewNotes = new JButton(new ImageIcon(JTPetCityTools.class.getResource("/co/com/carp/petcity/image/note_view.png")));
		jbtViewNotes.setToolTipText("Ver notas");
		jbtViewNotes.addActionListener(this);
		toolbar.add(jbtViewNotes);
		toolbar.addSeparator();
		return toolbar;
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub

	}

}
