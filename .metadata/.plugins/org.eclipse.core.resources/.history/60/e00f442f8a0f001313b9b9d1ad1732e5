package co.com.carp.petcity.jpa.entity;

import java.math.BigInteger;
import java.util.Set;
import java.io.Serializable;
import javax.persistence.*;

import javax.persistence.Entity;

/**
 * This class is attempt to be an implementation of person, this class represent
 * pet's owner. The persistent class for the owner database table.
 * 
 * @author Carlos Rodriguez
 * */
@Entity
public class Owner extends Person implements Comparable<Owner>, Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int identification;

	/**
	 * Owner home address
	 */
	private String address;

	/**
	 * Owner cell-phone
	 */
	private BigInteger cellphone;

	/**
	 * Owner phone
	 */
	private int phone;

	/**
	 * Pet set from owner
	 */
	private Set<Pet> petSet;

	public int getIdentification() {
		return this.identification;
	}

	public void setIdentification(int identification) {
		this.identification = identification;
	}

	/**
	 * @return the address
	 */
	public String getAddress() {
		return address;
	}

	/**
	 * @param address
	 *            the address to set
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * @return the cellphone
	 */
	public BigInteger getCellphone() {
		return cellphone;
	}

	/**
	 * @param cellphone
	 *            the cellphone to set
	 */
	public void setCellphone(BigInteger cellphone) {
		this.cellphone = cellphone;
	}

	/**
	 * @return the phone
	 */
	public int getPhone() {
		return phone;
	}

	/**
	 * @param phone
	 *            the phone to set
	 */
	public void setPhone(int phone) {
		this.phone = phone;
	}

	/**
	 * @return the petSet
	 */
	public Set<Pet> getPetSet() {
		return petSet;
	}

	/**
	 * @param petSet
	 *            the petSet to set
	 */
	public void setPetSet(Set<Pet> petSet) {
		this.petSet = petSet;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((address == null) ? 0 : address.hashCode());
		result = prime * result
				+ ((cellphone == null) ? 0 : cellphone.hashCode());
		result = prime * result + phone;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!super.equals(obj)) {
			return false;
		}
		if (!(obj instanceof Owner)) {
			return false;
		}
		Owner other = (Owner) obj;
		if (address == null) {
			if (other.address != null) {
				return false;
			}
		} else if (!address.equals(other.address)) {
			return false;
		}
		if (cellphone == null) {
			if (other.cellphone != null) {
				return false;
			}
		} else if (!cellphone.equals(other.cellphone)) {
			return false;
		}
		if (phone != other.phone) {
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		return super.toString() + ";Owner={" + this.address + ";"
				+ "cellphone:" + this.cellphone + ";" + "phone:" + this.phone
				+ ";" + "petSet:" + this.petSet + ";" + ";}";
	}

	@Override
	public int compareTo(Owner otherOwner) {
		return this.getName().compareToIgnoreCase(otherOwner.getName());
	}

}
